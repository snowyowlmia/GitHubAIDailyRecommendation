AI GitHub 项目追踪器 MVP - 产品需求文档 (PRD)
📋 产品概述
产品名称
AI GitHub Daily Tracker - AI项目每日追踪器
产品愿景
为AI开发者和爱好者提供一个自动化的GitHub项目发现工具，每天推送最值得关注的AI开源项目，帮助用户保持对AI领域最新发展的敏锐洞察。
产品目标

主要目标：每天自动发现并推送5个收藏最多的AI项目 + 5个趋势上升最快的AI项目
核心价值：节省手动搜索时间，避免错过重要项目，提供精准的AI项目推荐
成功指标：推送准确率>90%，去重效果100%，系统稳定性>99%

🎯 目标用户
主要用户群体

AI开发者：需要了解最新工具和框架
AI研究者：关注学术和研究项目
技术管理者：需要跟踪行业趋势做决策
AI爱好者：对AI技术发展感兴趣的个人

用户痛点

手动搜索GitHub费时费力
容易错过热门新项目
信息过载，难以筛选高质量项目
无法持续跟踪项目趋势变化

🚀 核心功能需求
MVP功能列表
1. 数据获取模块 (P0)
功能描述：通过GitHub API获取AI相关项目数据
具体需求：

使用GitHub Search API搜索AI相关项目
支持按star数排序获取热门项目
支持按更新时间获取趋势项目
实现API调用限制处理和错误重试

接受标准：

✅ 能成功调用GitHub API
✅ 每次获取至少50个候选项目
✅ API调用失败时有错误处理
✅ 请求间有适当延时避免限制

2. AI项目识别模块 (P0)
功能描述：智能识别项目是否与AI相关
具体需求：

基于关键词匹配识别AI项目
检查项目名称、描述、topics等字段
支持自定义关键词列表
过滤非AI相关项目

关键词列表：
artificial intelligence, machine learning, deep learning, neural network, 
computer vision, nlp, natural language processing, chatbot, tensorflow, 
pytorch, llm, gpt, transformer, reinforcement learning, data science, 
ai, openai, llama, bert, stable diffusion, generative ai, langchain
接受标准：

✅ AI项目识别准确率>85%
✅ 支持英文关键词匹配
✅ 忽略大小写进行匹配
✅ 检查多个字段（name, description, topics）

3. 项目去重模块 (P0)
功能描述：记录已推送项目，避免重复推送
具体需求：

使用JSON文件存储已推送项目记录
记录项目ID、推送日期、基本信息
自动清理30天前的记录
推送前检查项目是否已推送

数据结构：
json{
  "repo_id": {
    "name": "project-name",
    "full_name": "owner/project-name", 
    "sent_date": "2025-01-15T09:00:00",
    "stars": 1234,
    "url": "https://github.com/owner/project"
  }
}
接受标准：

✅ 100%避免重复推送同一项目
✅ 自动清理过期记录
✅ 数据持久化存储
✅ 支持并发访问安全

4. 趋势分析模块 (P0)
功能描述：计算项目趋势分数，识别上升最快的项目
具体需求：

基于star增长速度计算趋势分数
考虑项目年龄，计算日均增长率
综合star数和fork数进行评分
按趋势分数排序项目

计算公式：
趋势分数 = (stars/项目天数) * 0.7 + (forks/项目天数) * 0.3
接受标准：

✅ 能准确计算趋势分数
✅ 新项目相比老项目有合理权重
✅ 排序结果符合预期
✅ 处理边界情况（项目天数为0等）

5. 消息推送模块 (P0)
功能描述：格式化项目信息并推送给用户
具体需求：

支持Discord Webhook推送（主要方式）
支持自定义Webhook推送
美观的消息格式设计（Discord Embed格式）
包含项目关键信息（名称、描述、链接、统计数据）

Discord消息格式要求：
json{
  "embeds": [{
    "title": "🤖 AI项目日报",
    "description": "2025-01-15 最值得关注的AI开源项目",
    "color": 5814783,
    "fields": [
      {
        "name": "⭐ 收藏最多的AI项目",
        "value": "1. **project-name** - ⭐12,345 🍴2,345\n   项目描述...\n   [🔗 查看项目](https://github.com/owner/project)",
        "inline": false
      }
    ],
    "timestamp": "2025-01-15T01:00:00Z"
  }]
}
接受标准：

✅ 消息格式美观易读
✅ 包含所有必要信息
✅ Discord推送成功率>95%
✅ 支持Discord Embed格式

6. 自动化执行模块 (P0)
功能描述：通过GitHub Actions实现定时自动执行
具体需求：

每天北京时间9点自动执行
支持手动触发执行
执行日志记录和错误通知
自动提交数据文件更新

GitHub Actions配置：

定时执行：cron: '0 1 * * *'（UTC时间）
手动触发：workflow_dispatch
环境变量配置
执行状态通知

接受标准：

✅ 每天准时自动执行
✅ 支持手动触发
✅ 有详细的执行日志
✅ 失败时能及时通知

🏗️ 技术架构
技术选型

运行环境：GitHub Actions (Ubuntu Latest)
开发语言：Python 3.9+
外部API：GitHub REST API v3
数据存储：JSON文件（轻量级本地存储）
推送渠道：Discord Webhook, Custom Webhook
依赖管理：pip + requirements.txt

系统架构图
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   GitHub API    │────│   数据获取模块     │────│   AI项目过滤     │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                                ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│   消息推送      │────│   主控制器        │────│   去重 & 存储    │
└─────────────────┘    └──────────────────┘    └─────────────────┘
                                │
                                ▼
┌─────────────────┐    ┌──────────────────┐    ┌─────────────────┐
│ Discord/Webhook │────│   消息格式化      │────│   趋势分析       │
└─────────────────┘    └──────────────────┘    └─────────────────┘
文件结构
ai-github-tracker/
├── .github/
│   └── workflows/
│       └── tracker.yml              # GitHub Actions工作流
├── ai_tracker.py                    # 主程序脚本
├── sent_projects.json               # 已推送项目记录
├── requirements.txt                 # Python依赖列表
├── README.md                       # 项目说明文档
└── .gitignore                      # Git忽略文件
🔧 配置需求
环境变量配置
变量名是否必需说明示例值GITHUB_TOKEN是GitHub Personal Access Tokenghp_xxxxxxxxxxxxDISCORD_WEBHOOK_URL可选Discord Webhook URLhttps://discord.com/api/webhooks/...WEBHOOK_URL可选自定义Webhook地址https://hooks.example.com/ai-tracker
GitHub Secrets配置
需要在仓库Settings > Secrets中配置上述环境变量
📊 非功能性需求
性能需求

单次执行时间 < 5分钟
GitHub API调用次数 < 100次/小时
内存使用 < 500MB
推送延迟 < 30秒

可靠性需求

系统可用性 > 99%
API失败时自动重试3次
数据一致性保证100%
错误恢复时间 < 24小时

安全需求

所有API密钥通过GitHub Secrets管理
不在日志中输出敏感信息
遵循GitHub API使用条款
数据传输使用HTTPS

扩展性需求

支持添加新的推送渠道
支持自定义AI关键词
支持调整项目数量配置
支持多语言项目识别

🧪 测试需求
单元测试

AI项目识别准确性测试
趋势分数计算正确性测试
去重逻辑完整性测试
消息格式化测试

集成测试

GitHub API调用测试
Discord推送测试
完整工作流测试
错误处理测试

验收测试场景

正常执行流程：系统能成功获取、过滤、推送AI项目
去重功能：不会推送已发送过的项目
API限制处理：遇到API限制时能正确处理
推送失败处理：推送失败时有适当的错误处理
数据持久化：项目记录能正确保存和加载

📅 开发计划
迭代1：核心功能开发 (Week 1)

 搭建项目结构
 实现GitHub API数据获取
 实现AI项目识别逻辑
 实现基础去重功能

迭代2：推送功能开发 (Week 1)

 实现Telegram推送
 实现消息格式化
 实现趋势分析算法
 集成测试

迭代3：自动化部署 (Week 1)

 配置GitHub Actions工作流
 实现自动定时执行
 添加错误处理和日志
 完整端到端测试

迭代4：优化和文档 (Week 1)

 性能优化
 添加配置选项
 完善文档
 部署指南

✅ 验收标准
功能验收标准

 能自动识别并推送AI相关项目
 去重功能100%有效
 每天自动执行无需人工干预
 推送消息格式美观完整
 支持手动触发执行

质量验收标准

 代码覆盖率 > 80%
 无严重安全漏洞
 符合Python代码规范
 有完整的错误处理
 有详细的执行日志

部署验收标准

 GitHub Actions配置正确
 所有必要的Secrets已配置
 首次执行成功
 定时执行正常工作
 推送通知正常接收

🔄 后续迭代计划
V1.1 增强功能

支持企业微信/钉钉推送
添加项目分类标签
实现Web面板查看历史

V1.2 智能化

基于用户反馈的智能推荐
项目质量评分算法
个性化推荐设置

V1.3 数据分析

项目趋势分析报告
AI领域发展统计
用户订阅管理

📋 开发检查清单
开发完成前请确保：

 所有核心功能已实现
 代码经过充分测试
 文档完整准确
 部署流程验证成功
 错误处理完善
 性能符合要求
 安全措施到位
 用户体验良好


📞 技术支持
如有问题，请通过以下方式获取支持：

GitHub Issues：技术问题和bug反馈
项目文档：详细使用说明
代码注释：实现细节说明

项目优先级：P0(必须) > P1(重要) > P2(一般)
开发周期：预计4周完成MVP
发布策略：持续集成，功能驱动发布