name: Code Quality Check

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy pytest pytest-cov bandit safety

    - name: Code formatting check with Black
      run: |
        echo "🎨 检查代码格式..."
        black --check --diff ai_tracker.py test_*.py
      continue-on-error: false

    - name: Import sorting check with isort
      run: |
        echo "📦 检查导入排序..."
        isort --check-only --diff ai_tracker.py test_*.py
      continue-on-error: false

    - name: Lint with flake8
      run: |
        echo "🔍 运行代码检查..."
        # 停止构建如果有Python语法错误或未定义名称
        flake8 ai_tracker.py --count --select=E9,F63,F7,F82 --show-source --statistics
        # 警告其他问题但不停止构建
        flake8 ai_tracker.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: |
        echo "🔒 检查类型提示..."
        mypy ai_tracker.py --ignore-missing-imports
      continue-on-error: true  # Type checking不强制要求通过

    - name: Security check with bandit
      run: |
        echo "🛡️ 安全漏洞检查..."
        bandit -r ai_tracker.py -f json -o bandit-report.json
        bandit -r ai_tracker.py
      continue-on-error: true

    - name: Dependency vulnerability check
      run: |
        echo "📋 依赖项安全检查..."
        safety check --json --output safety-report.json
        safety check
      continue-on-error: true

    - name: Run tests
      env:
        GH_TOKEN: fake_token_for_testing
      run: |
        echo "🧪 运行测试..."
        # 如果没有测试文件，创建基本测试
        if [ ! -f "test_ai_tracker.py" ]; then
          echo "创建基本测试文件..."
          cat > test_ai_tracker.py << 'EOF'
import unittest
from unittest.mock import patch, MagicMock
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

class TestBasicFunctionality(unittest.TestCase):
    def test_import_success(self):
        """测试基本导入功能"""
        try:
            from ai_tracker import AIGitHubTracker
            self.assertTrue(True)
        except ImportError:
            self.fail("无法导入主要模块")

    @patch.dict(os.environ, {'GH_TOKEN': 'fake_token'})
    def test_tracker_initialization(self):
        """测试追踪器初始化"""
        from ai_tracker import AIGitHubTracker
        tracker = AIGitHubTracker()
        self.assertIsNotNone(tracker)

if __name__ == '__main__':
    unittest.main()
EOF
        fi
        python -m pytest test_*.py -v --cov=ai_tracker --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');

          let report = '## 🔍 代码质量检查报告\n\n';
          report += '### ✅ 检查项目\n';
          report += '- [x] 代码格式检查 (Black)\n';
          report += '- [x] 导入排序检查 (isort)\n';
          report += '- [x] 代码规范检查 (flake8)\n';
          report += '- [x] 类型提示检查 (mypy)\n';
          report += '- [x] 安全漏洞检查 (bandit)\n';
          report += '- [x] 依赖项安全检查 (safety)\n';
          report += '- [x] 单元测试\n\n';

          report += '### 📊 Python版本兼容性\n';
          report += `- 当前测试版本: ${{ matrix.python-version }}\n`;
          report += '- 支持版本: Python 3.9+\n\n';

          report += '### 🎯 下一步\n';
          report += '如果所有检查都通过，此PR可以进行代码审查。\n';
          report += '如果有失败项，请根据错误信息修复后重新提交。\n\n';
          report += '---\n';
          report += '*此报告由 GitHub Actions 自动生成*';

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
      continue-on-error: true

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC